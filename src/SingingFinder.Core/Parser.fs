// Implementation file for parser generated by fsyacc
module Parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing.ParseHelpers
# 1 "Parser.fsy"
   
open System
open SingingFinder.Core

# 11 "Parser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | MONDAY
  | TUESDAY
  | WEDNESDAY
  | THURSDAY
  | FRIDAY
  | SATURDAY
  | SUNDAY
  | FIRST
  | SECOND
  | THIRD
  | FOURTH
  | FIFTH
  | LAST
  | EVERY
  | AND
  | BEFORE
  | EOF
  | INT of (System.Int32)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_MONDAY
    | TOKEN_TUESDAY
    | TOKEN_WEDNESDAY
    | TOKEN_THURSDAY
    | TOKEN_FRIDAY
    | TOKEN_SATURDAY
    | TOKEN_SUNDAY
    | TOKEN_FIRST
    | TOKEN_SECOND
    | TOKEN_THIRD
    | TOKEN_FOURTH
    | TOKEN_FIFTH
    | TOKEN_LAST
    | TOKEN_EVERY
    | TOKEN_AND
    | TOKEN_BEFORE
    | TOKEN_EOF
    | TOKEN_INT
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_Day
    | NONTERM_Cardinality
    | NONTERM_DayList
    | NONTERM_CardinalityList
    | NONTERM_AndDaysBefore
    | NONTERM_SingingDay

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | MONDAY  -> 0 
  | TUESDAY  -> 1 
  | WEDNESDAY  -> 2 
  | THURSDAY  -> 3 
  | FRIDAY  -> 4 
  | SATURDAY  -> 5 
  | SUNDAY  -> 6 
  | FIRST  -> 7 
  | SECOND  -> 8 
  | THIRD  -> 9 
  | FOURTH  -> 10 
  | FIFTH  -> 11 
  | LAST  -> 12 
  | EVERY  -> 13 
  | AND  -> 14 
  | BEFORE  -> 15 
  | EOF  -> 16 
  | INT _ -> 17 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_MONDAY 
  | 1 -> TOKEN_TUESDAY 
  | 2 -> TOKEN_WEDNESDAY 
  | 3 -> TOKEN_THURSDAY 
  | 4 -> TOKEN_FRIDAY 
  | 5 -> TOKEN_SATURDAY 
  | 6 -> TOKEN_SUNDAY 
  | 7 -> TOKEN_FIRST 
  | 8 -> TOKEN_SECOND 
  | 9 -> TOKEN_THIRD 
  | 10 -> TOKEN_FOURTH 
  | 11 -> TOKEN_FIFTH 
  | 12 -> TOKEN_LAST 
  | 13 -> TOKEN_EVERY 
  | 14 -> TOKEN_AND 
  | 15 -> TOKEN_BEFORE 
  | 16 -> TOKEN_EOF 
  | 17 -> TOKEN_INT 
  | 20 -> TOKEN_end_of_input
  | 18 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startstart 
    | 1 -> NONTERM_start 
    | 2 -> NONTERM_Day 
    | 3 -> NONTERM_Day 
    | 4 -> NONTERM_Day 
    | 5 -> NONTERM_Day 
    | 6 -> NONTERM_Day 
    | 7 -> NONTERM_Day 
    | 8 -> NONTERM_Day 
    | 9 -> NONTERM_Cardinality 
    | 10 -> NONTERM_Cardinality 
    | 11 -> NONTERM_Cardinality 
    | 12 -> NONTERM_Cardinality 
    | 13 -> NONTERM_Cardinality 
    | 14 -> NONTERM_Cardinality 
    | 15 -> NONTERM_DayList 
    | 16 -> NONTERM_DayList 
    | 17 -> NONTERM_CardinalityList 
    | 18 -> NONTERM_CardinalityList 
    | 19 -> NONTERM_AndDaysBefore 
    | 20 -> NONTERM_AndDaysBefore 
    | 21 -> NONTERM_SingingDay 
    | 22 -> NONTERM_SingingDay 
    | 23 -> NONTERM_SingingDay 
    | 24 -> NONTERM_SingingDay 
    | 25 -> NONTERM_SingingDay 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 20 
let _fsyacc_tagOfErrorTerminal = 18

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | MONDAY  -> "MONDAY" 
  | TUESDAY  -> "TUESDAY" 
  | WEDNESDAY  -> "WEDNESDAY" 
  | THURSDAY  -> "THURSDAY" 
  | FRIDAY  -> "FRIDAY" 
  | SATURDAY  -> "SATURDAY" 
  | SUNDAY  -> "SUNDAY" 
  | FIRST  -> "FIRST" 
  | SECOND  -> "SECOND" 
  | THIRD  -> "THIRD" 
  | FOURTH  -> "FOURTH" 
  | FIFTH  -> "FIFTH" 
  | LAST  -> "LAST" 
  | EVERY  -> "EVERY" 
  | AND  -> "AND" 
  | BEFORE  -> "BEFORE" 
  | EOF  -> "EOF" 
  | INT _ -> "INT" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | MONDAY  -> (null : System.Object) 
  | TUESDAY  -> (null : System.Object) 
  | WEDNESDAY  -> (null : System.Object) 
  | THURSDAY  -> (null : System.Object) 
  | FRIDAY  -> (null : System.Object) 
  | SATURDAY  -> (null : System.Object) 
  | SUNDAY  -> (null : System.Object) 
  | FIRST  -> (null : System.Object) 
  | SECOND  -> (null : System.Object) 
  | THIRD  -> (null : System.Object) 
  | FOURTH  -> (null : System.Object) 
  | FIFTH  -> (null : System.Object) 
  | LAST  -> (null : System.Object) 
  | EVERY  -> (null : System.Object) 
  | AND  -> (null : System.Object) 
  | BEFORE  -> (null : System.Object) 
  | EOF  -> (null : System.Object) 
  | INT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 6us; 65535us; 0us; 16us; 19us; 20us; 22us; 29us; 23us; 33us; 27us; 28us; 30us; 16us; 3us; 65535us; 0us; 21us; 24us; 25us; 32us; 21us; 2us; 65535us; 0us; 18us; 30us; 17us; 2us; 65535us; 0us; 22us; 32us; 23us; 0us; 65535us; 1us; 65535us; 0us; 2us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 10us; 14us; 17us; 20us; 21us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 1us; 1us; 1us; 2us; 1us; 3us; 1us; 4us; 1us; 5us; 1us; 6us; 1us; 7us; 1us; 8us; 1us; 9us; 1us; 10us; 1us; 11us; 1us; 12us; 1us; 13us; 1us; 14us; 1us; 15us; 2us; 16us; 24us; 2us; 16us; 25us; 1us; 16us; 1us; 16us; 1us; 17us; 3us; 18us; 23us; 24us; 2us; 18us; 25us; 1us; 18us; 1us; 18us; 1us; 21us; 1us; 22us; 1us; 22us; 2us; 23us; 24us; 1us; 24us; 1us; 24us; 1us; 25us; 1us; 25us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 6us; 8us; 10us; 12us; 14us; 16us; 18us; 20us; 22us; 24us; 26us; 28us; 30us; 32us; 34us; 37us; 40us; 42us; 44us; 46us; 50us; 53us; 55us; 57us; 59us; 61us; 63us; 66us; 68us; 70us; 72us; |]
let _fsyacc_action_rows = 34
let _fsyacc_actionTableElements = [|15us; 32768us; 0us; 3us; 1us; 4us; 2us; 5us; 3us; 6us; 4us; 7us; 5us; 8us; 6us; 9us; 7us; 10us; 8us; 11us; 9us; 12us; 10us; 13us; 11us; 14us; 12us; 15us; 13us; 27us; 17us; 26us; 0us; 49152us; 0us; 16385us; 0us; 16386us; 0us; 16387us; 0us; 16388us; 0us; 16389us; 0us; 16390us; 0us; 16391us; 0us; 16392us; 0us; 16393us; 0us; 16394us; 0us; 16395us; 0us; 16396us; 0us; 16397us; 0us; 16398us; 0us; 16399us; 2us; 32768us; 14us; 19us; 15us; 31us; 2us; 32768us; 14us; 19us; 15us; 32us; 7us; 32768us; 0us; 3us; 1us; 4us; 2us; 5us; 3us; 6us; 4us; 7us; 5us; 8us; 6us; 9us; 0us; 16400us; 0us; 16401us; 8us; 32768us; 0us; 3us; 1us; 4us; 2us; 5us; 3us; 6us; 4us; 7us; 5us; 8us; 6us; 9us; 14us; 24us; 8us; 32768us; 0us; 3us; 1us; 4us; 2us; 5us; 3us; 6us; 4us; 7us; 5us; 8us; 6us; 9us; 14us; 24us; 6us; 32768us; 7us; 10us; 8us; 11us; 9us; 12us; 10us; 13us; 11us; 14us; 12us; 15us; 0us; 16402us; 0us; 16405us; 7us; 32768us; 0us; 3us; 1us; 4us; 2us; 5us; 3us; 6us; 4us; 7us; 5us; 8us; 6us; 9us; 0us; 16406us; 1us; 16407us; 14us; 30us; 7us; 32768us; 0us; 3us; 1us; 4us; 2us; 5us; 3us; 6us; 4us; 7us; 5us; 8us; 6us; 9us; 0us; 16408us; 6us; 32768us; 7us; 10us; 8us; 11us; 9us; 12us; 10us; 13us; 11us; 14us; 12us; 15us; 0us; 16409us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 16us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 28us; 29us; 30us; 31us; 32us; 35us; 38us; 46us; 47us; 48us; 57us; 66us; 73us; 74us; 75us; 83us; 84us; 86us; 94us; 95us; 102us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 3us; 1us; 3us; 0us; 3us; 1us; 2us; 2us; 5us; 4us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 3us; 3us; 3us; 3us; 3us; 3us; 4us; 4us; 5us; 5us; 6us; 6us; 7us; 7us; 7us; 7us; 7us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 16385us; 16386us; 16387us; 16388us; 16389us; 16390us; 16391us; 16392us; 16393us; 16394us; 16395us; 16396us; 16397us; 16398us; 16399us; 65535us; 65535us; 65535us; 16400us; 16401us; 65535us; 65535us; 65535us; 16402us; 16405us; 65535us; 16406us; 65535us; 65535us; 16408us; 65535us; 16409us; |]
let _fsyacc_reductions ()  =    [| 
# 200 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : SingingFinder.Core.SingingDay)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startstart));
# 209 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'SingingDay)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 13 "Parser.fsy"
                                         _1 
                   )
# 13 "Parser.fsy"
                 : SingingFinder.Core.SingingDay));
# 220 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 16 "Parser.fsy"
                                DayOfWeek.Monday 
                   )
# 16 "Parser.fsy"
                 : 'Day));
# 230 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 17 "Parser.fsy"
                                 DayOfWeek.Tuesday 
                   )
# 17 "Parser.fsy"
                 : 'Day));
# 240 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 18 "Parser.fsy"
                                   DayOfWeek.Wednesday 
                   )
# 18 "Parser.fsy"
                 : 'Day));
# 250 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 19 "Parser.fsy"
                                  DayOfWeek.Thursday 
                   )
# 19 "Parser.fsy"
                 : 'Day));
# 260 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 20 "Parser.fsy"
                                DayOfWeek.Friday 
                   )
# 20 "Parser.fsy"
                 : 'Day));
# 270 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 21 "Parser.fsy"
                                  DayOfWeek.Saturday 
                   )
# 21 "Parser.fsy"
                 : 'Day));
# 280 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 22 "Parser.fsy"
                                DayOfWeek.Sunday 
                   )
# 22 "Parser.fsy"
                 : 'Day));
# 290 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 25 "Parser.fsy"
                                First 
                   )
# 25 "Parser.fsy"
                 : 'Cardinality));
# 300 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 26 "Parser.fsy"
                                Second 
                   )
# 26 "Parser.fsy"
                 : 'Cardinality));
# 310 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 27 "Parser.fsy"
                                Third 
                   )
# 27 "Parser.fsy"
                 : 'Cardinality));
# 320 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 28 "Parser.fsy"
                                Fourth 
                   )
# 28 "Parser.fsy"
                 : 'Cardinality));
# 330 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 29 "Parser.fsy"
                                Fifth 
                   )
# 29 "Parser.fsy"
                 : 'Cardinality));
# 340 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 30 "Parser.fsy"
                               Last 
                   )
# 30 "Parser.fsy"
                 : 'Cardinality));
# 350 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Day)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 33 "Parser.fsy"
                                [_1] 
                   )
# 33 "Parser.fsy"
                 : 'DayList));
# 361 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'DayList)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Day)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 34 "Parser.fsy"
                                         _3 :: _1 
                   )
# 34 "Parser.fsy"
                 : 'DayList));
# 373 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Cardinality)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 37 "Parser.fsy"
                                          [_1] 
                   )
# 37 "Parser.fsy"
                 : 'CardinalityList));
# 384 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'CardinalityList)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Cardinality)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 38 "Parser.fsy"
                                                         _3 :: _1 
                   )
# 38 "Parser.fsy"
                 : 'CardinalityList));
# 396 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 41 "Parser.fsy"
                              None 
                   )
# 41 "Parser.fsy"
                 : 'AndDaysBefore));
# 406 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'DayList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 42 "Parser.fsy"
                                            Some(_2) 
                   )
# 42 "Parser.fsy"
                 : 'AndDaysBefore));
# 417 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : System.Int32)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 45 "Parser.fsy"
                                      DayOfMonth (_1) 
                   )
# 45 "Parser.fsy"
                 : 'SingingDay));
# 428 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Day)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 46 "Parser.fsy"
                                           Every (_2) 
                   )
# 46 "Parser.fsy"
                 : 'SingingDay));
# 439 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'CardinalityList)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Day)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 47 "Parser.fsy"
                                                  Regular (List.rev(_1),_2) 
                   )
# 47 "Parser.fsy"
                 : 'SingingDay));
# 451 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'CardinalityList)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Day)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'DayList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 48 "Parser.fsy"
                                                                OnOrBefore (List.rev(_1),_2,List.rev(_4) @ [_2]) 
                   )
# 48 "Parser.fsy"
                 : 'SingingDay));
# 464 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'DayList)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'CardinalityList)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Day)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 49 "Parser.fsy"
                                                             OnOrBefore (List.rev(_3),_4,List.rev(_1)) 
                   )
# 49 "Parser.fsy"
                 : 'SingingDay));
|]
# 478 "Parser.fs"
let tables () : Microsoft.FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:Microsoft.FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 21;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let start lexer lexbuf : SingingFinder.Core.SingingDay =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
