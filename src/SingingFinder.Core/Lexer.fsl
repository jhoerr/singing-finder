{

module Lexer

open Microsoft.FSharp.Text.Lexing
open System
open Parser

exception SyntaxError of string

let lexeme = LexBuffer<_>.LexemeString

let newline (lexbuf: LexBuffer<_>) = 
  lexbuf.StartPos <- lexbuf.StartPos.NextLine
}

let int = ['-' '+']? ['0'-'9']+
let digit = ['0'-'9']
let frac = '.' digit*
let exp = ['e' 'E'] ['-' '+']? digit+
let float = '-'? digit* frac? exp?

let white = [' ' '\t']+
let newline = '\r' | '\n' | "\r\n"

rule read =
  parse
  | white			{ read lexbuf }
  | newline			{ newline lexbuf; read lexbuf }
  | int				{ INT (int (lexeme lexbuf)) }
  | "mondays"		{ MONDAY }
  | "monday"		{ MONDAY }
  | "tuesdays"		{ TUESDAY }
  | "tuesday"		{ TUESDAY }
  | "wednesdays"	{ WEDNESDAY }
  | "wednesday"		{ WEDNESDAY }
  | "thursdays"		{ THURSDAY }
  | "thursday"		{ THURSDAY }
  | "fridays"		{ FRIDAY }
  | "friday"		{ FRIDAY }
  | "saturdays"		{ SATURDAY }
  | "saturday"		{ SATURDAY }
  | "sundays"		{ SUNDAY }
  | "sunday"		{ SUNDAY }
  | "first"			{ FIRST }
  | "1st"			{ FIRST }
  | "second"		{ SECOND }
  | "2nd"			{ SECOND }
  | "third"			{ THIRD }
  | "3rd"			{ THIRD }
  | "fourth"		{ FOURTH }
  | "4th"			{ FOURTH }
  | "fifth"			{ FIFTH }
  | "5th"			{ FIFTH }
  | "last"			{ LAST }
  | "every"			{ EVERY }
  | "before"		{ BEFORE }
  | ", and"			{ AND }
  | ",and"			{ AND }
  | "and"			{ AND }
  | ","				{ AND }
  | eof				{ EOF }
  | _ { raise (Exception (sprintf "SyntaxError: Unexpected char: '%s' Line: %d Column: %d" (lexeme lexbuf) (lexbuf.StartPos.Line+1) lexbuf.StartPos.Column)) }